<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.0">Jekyll</generator><link href="htpps://www.doug-skinner.com/feed.xml" rel="self" type="application/atom+xml" /><link href="htpps://www.doug-skinner.com/" rel="alternate" type="text/html" /><updated>2018-02-23T11:19:45-05:00</updated><id>htpps://www.doug-skinner.com/</id><title type="html">Doug Skinner’s Blog</title><subtitle>My own thoughts and opinions on software engineering topics, wider technology, people, and what ever else comes up.
</subtitle><entry><title type="html">Basic Server Administration - Day 5</title><link href="htpps://www.doug-skinner.com/writing/2018/02/23/Basic-Server-Administration-5.html" rel="alternate" type="text/html" title="Basic Server Administration - Day 5" /><published>2018-02-23T11:00:01-05:00</published><updated>2018-02-23T11:00:01-05:00</updated><id>htpps://www.doug-skinner.com/writing/2018/02/23/Basic-Server-Administration-5</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/02/23/Basic-Server-Administration-5.html">&lt;p&gt;Now that you have some experience with a text editor, another tool that is crucial for you to understand is systemctl. Systemctl is the command line wrapper around systemd which is how processes and programs are normally made to run, and are started and stopped by the administrator.&lt;/p&gt;

&lt;p&gt;The example process that we’ll be using in the demonstration is the firewall manager firewalld. Now, there are a couple main things that you can use systemctl for. To check the status of a running package, you just type:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl status firewalld&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which will give you the last few lines of the log file for the service, and a direct message about whether it’s running or not. If you want a service to start, it’s simply:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl start firewalld&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And similarly stopping a service is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl stop firewalld&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The last real command that you need to use is the &lt;code class=&quot;highlighter-rouge&quot;&gt;enable&lt;/code&gt; flag which just makes it so that the process starts when the server reboots. So normally the sequence that you follow when adding a new service is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl start firewalld &amp;amp;&amp;amp; systemctl enable firewalld &amp;amp;&amp;amp;systemctl status firewalld&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which to recap just starts the service, tells it to start on login, and then shows the status to ensure that it is running. Oh, and I almost forgot there is an alias flag &lt;code class=&quot;highlighter-rouge&quot;&gt;restart&lt;/code&gt; that basically stops the service and then starts it. The main reason that you’ll be starting and stopping services in the future is to have them relaunch with new config changes.&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">Now that you have some experience with a text editor, another tool that is crucial for you to understand is systemctl. Systemctl is the command line wrapper around systemd which is how processes and programs are normally made to run, and are started and stopped by the administrator.</summary></entry><entry><title type="html">Quick Tip - Remote Database Access in Apache</title><link href="htpps://www.doug-skinner.com/writing/2018/02/23/Quick-Tip-Remote-Servers-in-Apache.html" rel="alternate" type="text/html" title="Quick Tip - Remote Database Access in Apache" /><published>2018-02-23T11:00:00-05:00</published><updated>2018-02-23T11:00:00-05:00</updated><id>htpps://www.doug-skinner.com/writing/2018/02/23/Quick-Tip-Remote-Servers-in-Apache</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/02/23/Quick-Tip-Remote-Servers-in-Apache.html">&lt;p&gt;While working on my current project I ran into an issue where I was trying to access a database on a remote server within the API that I’m building. While I could access the database from the mysql command line tool, I could not access it within my web application. Finally after lots of searching it appears that the issue was actually a security setting within selinux. To turn this bit of security off just type the below and you’ll be on your way.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setsebool httpd_can_network_connect_db on &amp;amp;&amp;amp; setsebool -P httpd_can_network_connect_db on&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">While working on my current project I ran into an issue where I was trying to access a database on a remote server within the API that I’m building. While I could access the database from the mysql command line tool, I could not access it within my web application. Finally after lots of searching it appears that the issue was actually a security setting within selinux. To turn this bit of security off just type the below and you’ll be on your way.</summary></entry><entry><title type="html">Basic Server Administration - Day 4</title><link href="htpps://www.doug-skinner.com/writing/2018/02/22/Basic-Server-Administration-4.html" rel="alternate" type="text/html" title="Basic Server Administration - Day 4" /><published>2018-02-22T11:00:00-05:00</published><updated>2018-02-22T11:00:00-05:00</updated><id>htpps://www.doug-skinner.com/writing/2018/02/22/Basic-Server-Administration-4</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/02/22/Basic-Server-Administration-4.html">&lt;p&gt;Vim. That simple word can bring forth any emotion from love to hatred and even confusion for those that have used it before. What is it? Well, according to our man page, vim is Vi IMproved, a programmer’s text editor.  Now, you may be wondering what it means to be a programmer’s text editor, or why we would even need a text editor on our server.&lt;/p&gt;

&lt;p&gt;If you remember back to our first day with the ssh keys, we’ve actually already used vi, which is what vim is built upon, to create a file. Creating and editing files directly on the server saves you, the user, the trouble of having to copy the file to your local machine, edit it, and then upload it back to the server. Instead, we can just simply edit it directly where it lives. This allows you to make changes quicker and continue on with what you need to be doing.&lt;/p&gt;

&lt;p&gt;That’s all good and well, but you may be asking why I would choose vim. The answers pretty simple actually. Vi, the slightly more simplistic version of vim has all of the same keybindings and comes installed on pretty much any linux, unix, or bsd variant made in the last twenty years. This means that if you have to edit a file on a machine that is unable to update or install packages for whatever reason you can still edit files as an editor that you know is going to be there for you to rely on.&lt;/p&gt;

&lt;p&gt;In the coming tutorials I am going to be giving commands for you to use, and all of the file based commands will use vim. Instead of having to explain the commands every single post, it’s easier to have a base list for you to refer to. So, you may be expecting there to be a list of commands in a table below, with each telling you what it does. For this though I am actually going to take the easy route and direct you to a tutorial.&lt;/p&gt;

&lt;p&gt;Not just any tutorial though, but the vim tutor. The vim tutor is a program that ships with every version of vim and walks you through how to use vim by having you actually use vim to edit the tutorial itself. Before throwing you directly into it though, one thing about vim needs to be explained. Vim is a modal editor. That means that there exists multiple states that you can be in when using the editor, and in vim when in different modes the keys of your keyboard will actually do different things depending on what mode you are.&lt;/p&gt;

&lt;p&gt;When you launch vim you start in editing mode. If you try to type directly into the document, other things will happen. While this may seem confusing, this is actually where vim gains most of its power. An example of this power can be seen in two keystrokes. While in edit mode, if the cursor is at the beginning of a word and you type:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dw&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That will delete the entire word. Now imagine that the word that you wanted to delete was something long like the word administration. You could either hit the delete key for each letter, or simply type two letters and delete the entire word. To switch to input mode, where as you guessed it you can input text, you simply type:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And to exit back to editing mode you simply hit the:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;escape&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;key. If this seems interesting, then follow the instructions below to begin. And if it doesn’t, I still encourage you to give it a try. You never know when it might come in handy to know even just the basics of vim. To install vim run:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo yum install vim -y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And to launch the tutor just run:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vimtutor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">Vim. That simple word can bring forth any emotion from love to hatred and even confusion for those that have used it before. What is it? Well, according to our man page, vim is Vi IMproved, a programmer’s text editor. Now, you may be wondering what it means to be a programmer’s text editor, or why we would even need a text editor on our server.</summary></entry><entry><title type="html">Basic Server Administration - Day 3</title><link href="htpps://www.doug-skinner.com/writing/2018/02/21/Basic-Server_Administration-3.html" rel="alternate" type="text/html" title="Basic Server Administration - Day 3" /><published>2018-02-21T11:00:00-05:00</published><updated>2018-02-21T11:00:00-05:00</updated><id>htpps://www.doug-skinner.com/writing/2018/02/21/Basic-Server_Administration-3</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/02/21/Basic-Server_Administration-3.html">&lt;p&gt;Yesterday before we installed screen I briefly mentioned a program on your server called man, and glossed over what the program actually does. So today, we’re going to learn about man and why it should be the first thing you do when using a new command.&lt;/p&gt;

&lt;p&gt;A good first step is to run the command on itself. To follow along, that would be:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man man&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which will pop open a new screen that gives a description for the man command. The first entry is the name of the command, which includes the command that you type at the terminal and a brief description of what it does. When learning a new command this is very handy, as the description can save you a google on it’s own.&lt;/p&gt;

&lt;p&gt;Following the name is a synopsis of the command. This is useful as it show a shorthand of the various options that can be used with the command. After that, there is a roughly paragraph long description of the command that just expands upon the shorter bit above. The last bit of useful information is the options section. This lists each command line flag that the command can take, and gives a description of what the flag does to the command.&lt;/p&gt;

&lt;p&gt;As an exercise to learn man and yum, your next task is to use man to find the command line option to search the yum repositories for the rsync command, then attach to your update screen and install the rsync command there. I’ll give the command at the start of the post for tomorrow.&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">Yesterday before we installed screen I briefly mentioned a program on your server called man, and glossed over what the program actually does. So today, we’re going to learn about man and why it should be the first thing you do when using a new command.</summary></entry><entry><title type="html">Basic Server Administration - Day 2</title><link href="htpps://www.doug-skinner.com/writing/2018/02/19/Basic-Server-Administration-Day-2.html" rel="alternate" type="text/html" title="Basic Server Administration - Day 2" /><published>2018-02-19T11:00:00-05:00</published><updated>2018-02-19T11:00:00-05:00</updated><id>htpps://www.doug-skinner.com/writing/2018/02/19/Basic-Server-Administration-Day-2</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/02/19/Basic-Server-Administration-Day-2.html">&lt;p&gt;Now that you can log on to your server with ease, the next thing that we want to do is make sure that it is always up to date. But before we do that I want to just briefly explain how user sessions work for your server. When you log in to your server using the ssh command from yesterday, the server opens a session for your user account.&lt;/p&gt;

&lt;p&gt;You can open multiple sessions this way by either logging on from multiple computers or simply opening a new terminal window and logging in again. This session persists until you either exit the server or close your browser window. Now, why is this important to bring up when learning about keeping your server up to date? Well, put simply having your session end while your server is updating is the number one way to ruin your operating system.&lt;/p&gt;

&lt;p&gt;Since this can happen if you accidentally close your terminal window or even just lose wifi, then it makes sense to take measures to ensure that this doesn’t happen to you. One way, and what I would argue is the easiest way, is to install a program called screen. A brief description from screen’s man page:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Name: screen - screen manager with VT100/ANSI terminal emulation&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For a more detailed overview you can read the man page, more detail on what that actually is tomorrow, but in essence, screen allows you to have multiple background sessions running on the server. This means that if you do your updating in this background session, then it can never end unless the server gets shut off which helps ensure that your server doesn’t get ruined.&lt;/p&gt;

&lt;p&gt;To install screen, log on to the server and run the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo yum install screen -y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which will install screen onto the server using the default package manager for centos. Now that it’s installed we can launch a screen session using:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screen&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will launch you into a new session. Now, to leave the session running in the background run:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;control+a+d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And to rejoin the session:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screen -r&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And now that we’re back in the session, to fully update the server run:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo yum update -y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And after watching all of the text fly across the screen, type the leave command at any point to let that update run in the background and you can go on your merry way. From now on, every time that you need to update your software or install a new package just re-attach to that screen session and run it there. Tomorrow we’ll take a look at learning the man command through diving deep to learn more about the yum and screen commands that we used today.&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">Now that you can log on to your server with ease, the next thing that we want to do is make sure that it is always up to date. But before we do that I want to just briefly explain how user sessions work for your server. When you log in to your server using the ssh command from yesterday, the server opens a session for your user account.</summary></entry><entry><title type="html">Basic Server Administration - Day 1</title><link href="htpps://www.doug-skinner.com/writing/2018/02/18/Basic-Server-Admin-1.html" rel="alternate" type="text/html" title="Basic Server Administration - Day 1" /><published>2018-02-18T11:00:00-05:00</published><updated>2018-02-18T11:00:00-05:00</updated><id>htpps://www.doug-skinner.com/writing/2018/02/18/Basic-Server-Admin-1</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/02/18/Basic-Server-Admin-1.html">&lt;p&gt;After yesterdays post about who should be learning server administration, it’s time to actually start learning. The first step is to get yourself a linux machine and install Centos 7 on it, as that is what we will be using throughout this. With most hosting providers this is simply an option that you select when you’re signing up. The other required technologies are a computer running Mac OS, as that is what I use day to day so that’s the easiest for me to test.&lt;/p&gt;

&lt;p&gt;The first thing that you will probably do with your server is want to get onto it, normally through ssh. The command for this on your Mac is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh username@ip.ad.dr.ess&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After you type that, you should receive a prompt on your screen asking you for your password. Now, because you will be doing this frequently, or at least you should be to be properly learning, typing the password every time will quickly become tiresome. So we’re going to use key based authentication. Key based authentication works by generating a public key and a private key that work together. What this means is when you try to log onto a server, your laptop is going to hand your private key to the server, and if it matches with one that the server has in its key list then you can logon without using a password.&lt;/p&gt;

&lt;p&gt;To start this process, on terminal on your mac type the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t RSA&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which means that we will be generating an ssh key with the RSA encryption scheme. If you choose you can enter a password when prompted, and you should save it within the default location. Then type&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat ~/.ssh/id_rsa.pub | pbcopy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which just copies the public portion of the key that was just created to the system clipboard. Then ssh to the server using the ssh command from above, and do the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir .ssh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vi .ssh/authorized_keys&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we are in a command line text editor named vi, which will seem extremely confusing at first, and we’ll get into it one day but for now just hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; key, hit &lt;code class=&quot;highlighter-rouge&quot;&gt;command+v&lt;/code&gt; to paste the public key from your clipboard, hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;esc&lt;/code&gt; key on your keyboard, then type &lt;code class=&quot;highlighter-rouge&quot;&gt;:wq&lt;/code&gt; and you’re out. Now just to quickly breeze through the wizardry that we just went through, we went into &lt;strong&gt;i&lt;/strong&gt;nsert to put text into the file, pasted the text into the file, &lt;strong&gt;esc&lt;/strong&gt;aped from insert mode, and then &lt;strong&gt;w&lt;/strong&gt;rote the file and &lt;strong&gt;q&lt;/strong&gt;uit from the file.&lt;/p&gt;

&lt;p&gt;Now to try this out type&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;quit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which will have you leave the server. Then if we did everything right, after trying to ssh again, that command from the top, you should be able to log into the server without using your password. Again, this seems like a little thing but trust me it will be very helpful going forward.&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">After yesterdays post about who should be learning server administration, it’s time to actually start learning. The first step is to get yourself a linux machine and install Centos 7 on it, as that is what we will be using throughout this. With most hosting providers this is simply an option that you select when you’re signing up. The other required technologies are a computer running Mac OS, as that is what I use day to day so that’s the easiest for me to test.</summary></entry><entry><title type="html">Should You Learn Server Administration?</title><link href="htpps://www.doug-skinner.com/writing/2018/02/17/Who-Should-Learn-Server-Administration.html" rel="alternate" type="text/html" title="Should You Learn Server Administration?" /><published>2018-02-17T11:00:00-05:00</published><updated>2018-02-17T11:00:00-05:00</updated><id>htpps://www.doug-skinner.com/writing/2018/02/17/Who-Should-Learn-Server-Administration</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/02/17/Who-Should-Learn-Server-Administration.html">&lt;p&gt;So, I’ve been asked by a few people both at work and school about who should learn server administration. While I am by no means an expert at administrating servers, I do keep a healthy homelab of between fifteen and twenty servers and I help maintain roughly the same amount of servers here at my day job so I do have some basic knowledge. I will try to outline a few people who should look into this, and also a few reasons as to why they should.&lt;/p&gt;

&lt;p&gt;The first group of people that may be curious about server administration are those who are looking to either switch careers from something else into server administration or those who are looking to make the jump from help desk, or related, to being an administrator. While being a server administrator is not the easiest role in the world, knowing the basics is certainly doable for the average person interested in technology. The second group of people would be developers looking to launch a website or other online service, maybe a server component for a mobile application or related, and wish to have control over where that will be hosted.&lt;/p&gt;

&lt;p&gt;By following the path of becoming a server administrator one will gain a basic understanding of how the internet operates, as each and every website that you visit throughout the day is run by technologies that are roughly the same as what you will be learning. Once you have learned this information yourself, it will be easy for you to apply among any number of uses, whether that be a virtual machine on your laptop or desktop or even on a hosted virtual private server (VPS) hosted at a hosting provider. The only difference between the two are where the machine is located.&lt;/p&gt;

&lt;p&gt;For those simply looking to become server administrators, that means that this knowledge will be easily transferrable among any company that you wish to work for. Those developers looking to launch their own site will reap greater benefit as it will allow you to host your site with any hosting provider, so you can jump between them until you find the right mix of price and customer support as you see fit. This lack of provider tie in becomes even more important when the developer realizes that they don’t have to host everything under the sun with AWS. There is nothing wrong with hosting services on AWS, but one can normally save time, money and stress by being able to host their site on any old box that runs linux.&lt;/p&gt;

&lt;p&gt;I am continually amazed by the amount of classmates that I talk to that don’t even realize there is another option to hosting a website that isn’t on the platform provided by AWS. They are even more amazed to learn how simply having one load balancer and two web servers behind it sets them up to scale almost infinitely for a time. While there are limitations to that, trust me by the time that you hit them you should easily be making enough money from your site or service that upgrading from that setup can be the problem of someone that you hire.&lt;/p&gt;

&lt;p&gt;Considering the above benefits of learning a new skill for career advancement or ease of launching a new project, for anyone even thinking about starting to learn server administration the answer should be a resounding yes. Over the next few days and weeks I’ll be putting together a series of posts that will allow one to begin the path of server administration by starting with a blank VPS and getting to the point of having a secure one page website. Now, what can one do with one page site? They can have it be a simple resume site, or even turn it into a bunch of pages kind of like the blog that you are currently reading. Neat, huh?&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">So, I’ve been asked by a few people both at work and school about who should learn server administration. While I am by no means an expert at administrating servers, I do keep a healthy homelab of between fifteen and twenty servers and I help maintain roughly the same amount of servers here at my day job so I do have some basic knowledge. I will try to outline a few people who should look into this, and also a few reasons as to why they should.</summary></entry><entry><title type="html">Found Vs Made Photography</title><link href="htpps://www.doug-skinner.com/writing/2018/02/12/Found-Vs-Made-Photography.html" rel="alternate" type="text/html" title="Found Vs Made Photography" /><published>2018-02-12T11:00:00-05:00</published><updated>2018-02-12T11:00:00-05:00</updated><id>htpps://www.doug-skinner.com/writing/2018/02/12/Found-Vs-Made-Photography</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/02/12/Found-Vs-Made-Photography.html">&lt;p&gt;There is a common misconception today that photography as an art form is a medium akin to painting or drawing, thus allowing the photographer to share their vision of the world with those who view the work. While it is true that viewing a photo does allow one to see how the world appears to the artist, there is no reason to believe that the artist is creating that world. Considering other mediums of art, using painting as an example, when the artist sets out to capture their subject exactly as how it is seen, the subject can often appear different in the final product. That’s not to say that the artist set out to modify the subject, however it is often unavoidable. For example, when painting a flower, there are a few things that can be changed from reality without the artist noticing. The easiest of these for others to see would be the color of the flower, for even if the artist matches the color they see entirely accurately there is no guarantee that the color is true to how others perceive it. Again, this is not a mistake made by the artist, it is simply the reality of relying on the human eye to accurately detect color.&lt;/p&gt;

&lt;p&gt;In contrast, when using a camera with sufficient technology this is impossible as the camera will capture the true color of the object regardless of what it’s operator sees. One of the wonders of photography though is that through the magic of post-processing, either digital or analog, it is possible for the artist to change how the colors or even subjects appear within the photo. This single aspect distinguishes photography as being different as it allows for two different categories of photography to exist, that of the found image and that of the made image.&lt;/p&gt;

&lt;p&gt;The found image is often what most photographers start with when they first begin taking photos. A found image is one that represents what the artist saw in front of them at the time of hitting the shutter, but also relies upon the content of the photo having been there before the photographer decided to take the image. Many start here as it is relatively easy to just walk around capturing images of what’s in front of you. That is not to say though, that capturing a good found image is easy; This requires being in the right place at the right time, and for the photographer to have a sense of how the image will look before taking it.&lt;/p&gt;

&lt;p&gt;Arguably the most well-known form of found photography is street photography. The image of a photographer walking the streets of a big city and snapping pictures of the interesting things going on around them is a familiar one to anyone that’s paid attention to photography. This is also the style of photography that was common in the mid twentieth century, as it allowed those that lived within New York City to share the wonders of the big city with those in America who didn’t. As the street photographer must act quickly to capture the events unfolding around them, there is little room for them to make the images into something they aren’t.&lt;/p&gt;

&lt;p&gt;The other well-known genre of found photography is landscape photography, where exactly as it sounds the photographer goes out and captures the landscape in front of them. This can be anything from a sweeping mountain range to a lush forest or a city off in the distance. It’s with these images though where a beginner photographer may start drifting into made photography. Most people when trying to make their photography better delve into learning how to “post-process” their images. In landscape photography, one may not see it as a big deal to simply make the green of the trees a little greener, or the water in the lake a little blue-er, however by doing so they are manipulating the image to be different from what the naked eye sees.&lt;/p&gt;

&lt;p&gt;There is nothing wrong with photographers doing this, it is simply good to note that when doing so a photographer moves from showing his surroundings to showing how he perceives his surroundings. Another slight crossover genre of photography is that of the portrait photographer. While one may start taking photos of those around them in natural light, doing so may lead the photographer to look into using extra light which changes the image. Or a photographer’s client may request that the photographer remove imperfections within the image such as stray hairs or acne, which while helpful to the subject does change the image.&lt;/p&gt;

&lt;p&gt;This is not to say that lighting or changing the images in post is the only way to “make” and image. Regarding portrait photography again, there are many things the photographer can change before taking the picture that moves the image towards the made end of the spectrum including having the subject of the photograph go to certain locations, having them wear certain clothes or makeup, or even changing who the subject is. This can then go even further if the photographer chooses to, mostly through post processing. Using Photoshop or one of its many competitors for post processing is what truly allows the photographer to delve into the made photography spectrum, as using these programs allow skilled artists to manipulate the images in almost any way that they choose. This can be anything from changing colors to removing items in the frame to adding items to the frame, all of which allow the artist to show us their view of the world rather than just the world.&lt;/p&gt;

&lt;p&gt;Both of found and made photography have their place within the world, and neither is initially better than the other. Without having both, the world of photography would be a much simpler and more boring world, and the art scene would be without some of the major game changers within the medium.&lt;/p&gt;</content><author><name></name></author><category term="Photography" /><summary type="html">There is a common misconception today that photography as an art form is a medium akin to painting or drawing, thus allowing the photographer to share their vision of the world with those who view the work. While it is true that viewing a photo does allow one to see how the world appears to the artist, there is no reason to believe that the artist is creating that world. Considering other mediums of art, using painting as an example, when the artist sets out to capture their subject exactly as how it is seen, the subject can often appear different in the final product. That’s not to say that the artist set out to modify the subject, however it is often unavoidable. For example, when painting a flower, there are a few things that can be changed from reality without the artist noticing. The easiest of these for others to see would be the color of the flower, for even if the artist matches the color they see entirely accurately there is no guarantee that the color is true to how others perceive it. Again, this is not a mistake made by the artist, it is simply the reality of relying on the human eye to accurately detect color.</summary></entry><entry><title type="html">Prex</title><link href="htpps://www.doug-skinner.com/projects/2018/02/09/Prex.html" rel="alternate" type="text/html" title="Prex" /><published>2018-02-09T12:00:00-05:00</published><updated>2018-02-09T12:00:00-05:00</updated><id>htpps://www.doug-skinner.com/projects/2018/02/09/Prex</id><content type="html" xml:base="htpps://www.doug-skinner.com/projects/2018/02/09/Prex.html">&lt;p&gt;The &lt;strong&gt;P&lt;/strong&gt;ython &lt;strong&gt;R&lt;/strong&gt;eguler &lt;strong&gt;Ex&lt;/strong&gt;pression handler is a basic script written in
Python (shocking I know) that reads in a regex string and the file to search.&lt;/p&gt;

&lt;p&gt;Rather than using the built in regex class/parser, Prex then creates a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Deterministic_finite_automaton&quot;&gt;DFA&lt;/a&gt; from the
input regex string, to allow the regex to be processed. After reading in the
input file, separated line by line on newline characters (‘\n’), the script then
feeds in each line to the internal DFA character by character. If the DFA
reaches the end state, it then returns the starting index, ending index, and all
characters that match the regex printing that info to stdout.&lt;/p&gt;</content><author><name></name></author><summary type="html">The Python Reguler Expression handler is a basic script written in Python (shocking I know) that reads in a regex string and the file to search.</summary></entry><entry><title type="html">Constructing A DFA From A Regex</title><link href="htpps://www.doug-skinner.com/writing/2018/02/09/DFA-for-Regex.html" rel="alternate" type="text/html" title="Constructing A DFA From A Regex" /><published>2018-02-09T11:00:00-05:00</published><updated>2018-02-09T11:00:00-05:00</updated><id>htpps://www.doug-skinner.com/writing/2018/02/09/DFA-for-Regex</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/02/09/DFA-for-Regex.html">&lt;p&gt;While creating &lt;a href=&quot;https://doug-skinner.com/projects/2018/02/09/Prex.html&quot;&gt;Prex&lt;/a&gt;,
one of the major challenges was trying to figure out the best way to represent a
walkable path through the regular expression without just resorting to the built in regular
expression class within Python. After some deliberation, and a failed attempt of
trying to keep track of my position walking through the string iteself, I
remembered from my Automata class that a regular expression has to be able to be
represented within a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Deterministic_finite_automaton&quot;&gt;Deterministic Finite Automaton&lt;/a&gt; or it’s
not valid, so I decided to construct one of those. In order to do this, I would
need three classes, one to represent each state of the DFA, one to represent the
actual DFA, and then one to read in the file and the regex string to be
processed. Since the actual code for the project can be found both on my personal GitLab
and Github I won’t be showing the actual code here, just describing the thought
process.&lt;/p&gt;

&lt;p&gt;Creating the state representation was relatively simple. It has three
internal variables, one to hold any possible loop variables, one to hold any
possible transition variables, and then one to represent the next state. The
reason for that last variable is to represent the possible states as a linked
list of states, to easily keep track of the beginning and end of the list. In
order to create the DFA from the regex, a blank state is created initially.
Then, for each character a new state is created, the transition variable is set
to the character, and then the previous state’s next state is set to the current
state.&lt;/p&gt;

&lt;p&gt;The only exception to this is if the character is +, *, [, or ]. If the
character is a +, which means that the character can appear one or many times,
then a new state is added with a loop variable that matches the previous states
transition variable and the transition variable is set to ‘’. Aside, in this DFA
a transition of ‘’ is treated as a null transition allowing it to be
transitioned across at any time. If the character is a *, which means that the character can be there zero or
any number of times, the previous characters transition variable is moved to the
loop variable, and the transition variable is set to ‘’. This allows it to be
looped infinitely or skipped entirely.&lt;/p&gt;

&lt;p&gt;The last part of the construction is if the character is a [. If it is, then a
flag is set indicating that we are currently within brackets. While that flag is
set, all characters encountered are added to the transition variable of the
current state. Once we encounter a ], we turn that flag off and continue. And
thus, the DFA is made and we can start processing the passed in strings.&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">While creating Prex, one of the major challenges was trying to figure out the best way to represent a walkable path through the regular expression without just resorting to the built in regular expression class within Python. After some deliberation, and a failed attempt of trying to keep track of my position walking through the string iteself, I remembered from my Automata class that a regular expression has to be able to be represented within a Deterministic Finite Automaton or it’s not valid, so I decided to construct one of those. In order to do this, I would need three classes, one to represent each state of the DFA, one to represent the actual DFA, and then one to read in the file and the regex string to be processed. Since the actual code for the project can be found both on my personal GitLab and Github I won’t be showing the actual code here, just describing the thought process.</summary></entry></feed>