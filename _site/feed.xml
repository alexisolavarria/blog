<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="htpps://www.doug-skinner.com/feed.xml" rel="self" type="application/atom+xml" /><link href="htpps://www.doug-skinner.com/" rel="alternate" type="text/html" /><updated>2018-04-11T15:54:13-04:00</updated><id>htpps://www.doug-skinner.com/</id><title type="html">Doug Skinner’s Blog</title><subtitle>My own thoughts and opinions on software engineering topics, wider technology, people, and what ever else comes up.
</subtitle><entry><title type="html"></title><link href="htpps://www.doug-skinner.com/2018/04/11/2018-01-22-More-NN-Thoughts.html" rel="alternate" type="text/html" title="" /><published>2018-04-11T15:54:13-04:00</published><updated>2018-04-11T15:54:13-04:00</updated><id>htpps://www.doug-skinner.com/2018/04/11/2018-01-22-More-NN-Thoughts</id><content type="html" xml:base="htpps://www.doug-skinner.com/2018/04/11/2018-01-22-More-NN-Thoughts.html">&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: This post is very long. Read at your own risk.&lt;br /&gt;
Also as part of my class discussed previously, I had to write a term paper on
any topic that my little heart desired, as long as it related to the class. The
topic was copyright law in the online realm, and what follows is the paper. Enjoy.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Currently there is a conversation ongoing within the United States about stealing. This discussion however, isn’t about the theft of physical property. The discussion is instead focused on the common act among internet users of copying and sharing files and whether that should be considered stealing according to United States law. Currently according to the United States Code, Title 17: Sections 501 and 506 (17 U.S. Code § 506), any unauthorized copying is against federal law, and the law prescribes severe civil and criminal penalties for the act. This law, and the punishments defined within are based on treating the digital copying of files, called digital theft, the same as physical theft. Based on the actions of most individuals within society however, the argument can and should be made to not treat the actions as equivalent.&lt;/p&gt;

&lt;p&gt;According to Reynolds, intellectual property is the “term used to describe works of the mind—such as art, books, films, formulas, inventions, music, and processes—that are distinct and owned or created by a single person or group.” (Reynolds, G. 2014). This intellectual property is governed through various governments through copyright, patent, and trade secret laws. The two sets of laws that most frequently govern the acts of copying online files are copyright laws and patent laws, protecting art, books, film, and music or inventions respectively. According to Article 1, Section 8, Clause 8 congress shall have the power “to promote the Progress of Science and useful Arts, by securing for limited Times to Authors and Inventors the exclusive Rights to their respective Writings and Discoveries.” (Article 1, Section 8, Clause 8. 2000). Also, according to Reynolds, a copyright is the “exclusive right to distribute, display, perform, or reproduce an original work in copies or to prepare derivative works based on the work.” (Reynolds, G. 2014). Any person found to be in violation of the rights held by a copyright holder is committing copyright infringement. According to current United States law the courts have much ability to pursue or make example cases of copyright infringement, as they have the power to award fines anywhere from $200 to $100,000. Current copyright law guarantees the holder to the rights to their work for a period of several years.&lt;/p&gt;

&lt;p&gt;At the bidding of lobbyists from those who stand to gain a lot by extending copyright, the term of copyright has been extended 11 times in the timespan starting in 1960. The people primarily behind the lobbyists are mostly movie studios and other large holders of multiple copyrights to merchandising empires. The reason behind fighting so hard for copyright extensions is that the studios make most of their profit from selling toys, movies, and other tie-ins for their various iconic properties.&lt;/p&gt;

&lt;p&gt;The original term of copyright was twenty-eight years, however the Copyright Term Extension Act signed into law in 1998 sets out the time limits outlined as follows (COPYRIGHT TERM EXTENSION):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For works created after January 1, 1978, copyright protections endure for the life of the author plus 70 years.&lt;/li&gt;
  &lt;li&gt;For works created but not published or registered before January 1, 1978, the term endures the life of the author plus 70 years, but also guarantees that it expires no earlier than December 31, 2004.&lt;/li&gt;
  &lt;li&gt;For works created before 1978 that are still within their original term of copyright the total term is to be extended to 95 years from the original date of copyright.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once this act was signed into law, it was challenged by Eric Eldred. Eldred wanted to create an online library of sorts, where older books would be available for viewing to those who otherwise wouldn’t have access to them. The Eldred v. Ashcroft case went all the way to the United States Supreme Court, which upheld the act as constitutional in 2003. After the Supreme Court made this decision, many internet activists revolted against it, not unlike what occurred during the attempted passing of PIPA and SOPA in 2012. The activists attempted to get Congress to change the law through appeals directly to its members, and even started a campaign to amend the Constitution (Wu, T. 2003). Other members of the internet activist groups however fought to fix this wrong doing another way. The activists argued that as they had the power to write code to either enforce the law or allow it to be broken easier, that power should be used to directly influence the publics conformance or not with the law. While that is not to say that the activists directly encouraged the breaking of the law, it can be stated that the like great tax lawyers can find loopholes within the tax code, great programmers and activists should likewise look to exploit the copyright protections within any possible legal loopholes (Wu, T. 2003). Thus, semi-organized resistance to copyright law was discussed for the first time regarding the digital realm.&lt;/p&gt;

&lt;p&gt;One of the major defenses used by these activists, and unfortunately those who do go on to break the law, is the concept of the Fair Use Doctrine. Renyold’s defines it as “allowing portions of copyrighted materials to be used without permission under certain circumstances.” (Reynolds, G. 2014). The United States Code, according to Title 17 Section 107 states that “the fair use of a copyrighted work, including such use by reproduction in copies or phonorecords or by any other means specified by that section, for purposes such as criticism, comment, news reporting, teaching (including multiple copies for classroom use), scholarship, or research, is not an infringement of copyright.” (17 U.S. Code § 107). The law also outlines the following four considerations to use when determining whether a specific use of a copyrighted work falls within fair use.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The purpose and character of the use, including whether such use is of a commercial nature or is for nonprofit educational purposes;&lt;/li&gt;
  &lt;li&gt;The nature of the copyrighted work;&lt;/li&gt;
  &lt;li&gt;The amount and substantiality of the portion used in relation to the copyrighted work as a whole;&lt;/li&gt;
  &lt;li&gt;Finally, the effect of the use upon the potential market for or value of the copyrighted work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The law also concludes by stating that the above guidelines are to be used whether the copyrighted work is published or not.&lt;/p&gt;

&lt;p&gt;An application of the Fair Use Doctrine in 2011 was when the HathiTrust Digital Library had a lawsuit filed against them by the Authors Guild, an advocacy group for writers. The reasoning behind the lawsuit was that multiple digital copies of a work or text were created through the simple act of building the library, that HathiTrust Digital Library was violating copyright by reproducing copyrighted works without the explicit permission of each copyright holder. While the courts did eventually side with the library, stating that by transferring the works from a written form to digital form the library was falling under transformative use, an all too common counter point to this ruling is the continued prosecution of those who share music or other forms of media digitally.&lt;/p&gt;

&lt;p&gt;In the book “What if We Could Re-Imagine Copyright”, Christophe Geiger argued that copyright protections are key to the continued survival of many forms of creative expression (Geiger, C. 2017). While Geiger does acknowledge that copyrights are mostly beneficial for large corporations, he still argues for the continued use of copyright. The argument can be made that artists will be loath to continue producing content without the knowledge that their work will be free from copying, however in modern times it seems that this is no longer the case. This can be seen in the large number of people creating songs, videos, and other creations and either open-sourcing the contents or uploading them to platforms where the platform owner holds the ownership of the content. This counter-argument can then be extended to considering if people are willing to give up ownership of a work entirely, that there should be no qualms about the sharing of their content to new audiences.&lt;/p&gt;

&lt;p&gt;Once someone follows this train of thought, it begs the question of whether copying digital bits to a friend is ethical instead of illegal. Once taken out of the realm of legality into the realm of everyday thought, it seems remarkable that this conversation has even continued in the days of easy access to everything online. While the law unfairly equivocates downloading a copyrighted work with common law stealing, what should be considered the more important question to an individual that is about to commit this act is how a group of their peers, also known as a jury, would see this action. The reason this is important is that while the laws of a country are seemingly set in stone, in most developed countries it is the will of the people, again that group of your peers, that can help shape and change the way the law works. This process of change allows the laws to be continually updated to reflect what society considers to be unethical.&lt;/p&gt;

&lt;p&gt;Before the topic can be discussed, a brief description on the difference between illegal (legal) and unethical (ethical) is necessary. Legal means something recognized or made effective by a court of law as distinguished from a court of equity, whereas ethics is defined as the moral principles of an individual. Defined in plain English, for an action to be illegal it must be against a written law, whereas an action must be considered immoral to a person to be ethically wrong. Now, a definition of moral, sanctioned by one’s conscience, will be helpful here. While legality is based on written laws which are notoriously hard to change in the United States no matter how easy that should be, ethicality is based on one’s own belief of what is right and wrong. And, as can be seen on Wiring the Brain (Mitchell, K. 2011, June 13), the morals of one person come from those around the individual.&lt;/p&gt;

&lt;p&gt;Once this fact has been accepted, it is not that far of a jump to conclude how a law is originally created. A law is a cemented moral based upon a specific point in time. As anyone who’s ever watched the American political system flounder to change the laws put into place by the previous administration has learned, laws are difficult to change simply because they are easily defended by those who they protect. What does this mean? Well, it means that while morals evolve based on what a group of people currently think, laws are based upon what a group decided to write down at some point in the past. This means that there is going to naturally be some drift between the two of these points. And due to the difficulty of changing the written laws, the gap only increases over time. So, while everyone can agree, at least within the United States, that downloading content that you don’t currently have an agreement to have access to is illegal the real question is to whether this same act is unethical.&lt;/p&gt;

&lt;p&gt;This depends entirely upon what society currently thinks, and I think that the argument can be made that society agrees that downloading is not stealing which goes back to the definition of stealing. The definition of stealing is defined as follows: party A has an item, and party B doesn’t; Party B then takes the item from party A; Now party B has it and party A doesn’t. This is a zero-sum problem, where only one party can have the item at once. That’s why common theft is considered both illegal and unethical as it means that one person’s loss is another person’s gain.&lt;/p&gt;

&lt;p&gt;Downloading an item, such as an mp3 file, is not zero sum however. If an mp3 is taken, copied it, and given to another party the first party still has their copy of the mp3 and now someone else does too. This means that both parties have the file, resulting in one person’s gain and another person’s neutral. It should be easy to agree that between having a zero-sum vs a positive sum outcome, the positive sum is more desired. And if the outcome is more desired, there is absolutely no reason that it should be made, or continue to be, against the law. And it seems that most of current American society would agree with me.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;rounded img-fluid shadow&quot; src=&quot;/img/post_images/Piracy_Percentages_Wide.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Mick, J. 2013, January 21)&lt;/p&gt;

&lt;p&gt;Another argument for the easing of copyright laws is that most great works of history have been derivative in some manner. A derivative work is an expressive creation that includes major elements of an original copyright protected work, without consisting entirely of the original work. According to law, the work must be considered original and bear the marks of the new artist in order to be truly derivative instead of simply copying. While one of the most famous examples of a derivative work, the LHOOQ, is simply a joke consisting of the Mona Lisa painting originally created by Leonardo da Vinci repainted to include a moustache, there is no reason to believe that is the only form of derivative work. Most media that the American public consumes is derivative in some way. Late night comedy shows almost entirely consist of poking fun at the actions of those around them within society, or mocking popular culture elements of TV Shows. Considering TV shows, two of the most popular shows in America Family Guy and The Simpsons are incredibly derivative, as both shows not only have entire characters that are simply parodies of characters, both real and cartoon, but also have entire episodes that consist of making fun of another show or movie.&lt;/p&gt;

&lt;p&gt;Examples such as these aren’t limited to TV shows, as movies and books have done the same thing. After the Lord of the Rings became a popular book, the entire genre of fantasy consisting of made up worlds with original languages and creatures that never existed before exploded into popularity. Harry Potter serves as another book that helped to spark the love of fantasy within another generation of society. Similarly, the book Dune is considered a large part of the popularity of Science Fiction, and the entire Star Wars franchise is entirely based off the success of the first movie, A New Hope, that is considered by many critics to be almost an entire rip off of the story from Dune (Kunzru, H. 2015, July 03). Disney, the new owners of Star Wars, are not unfamiliar with the concept of derivative works themselves, as most of their popular movies are based on simply taking stories from the Fairy Tales Grimm, making them appropriate for children by taking out references to death, murder, and the gruesome bits, and marketing them as if they were originally created by Disney.&lt;/p&gt;

&lt;p&gt;Going back to original example of the LHOOQ, most painters are very derivative as they grow upon the designs and ideas of those that came before them. Or, sometimes this takes the shape of going the other direction. An artist may consume so much of one type of media only to ensure that they go the entirely opposite direction to be original. However, originality only for the sake of not being derivative can be even be considered derivation itself as you must consume enough of a topic to make sure that your implementation doesn’t include anything that’s in the original. Finally, probably the most derivative genre of media of all is music, for many of the same reasons as painting. Music goes even further as many of the most popular songs nowadays are nothing more than rehashes of those that came before. An example recently in the news was when one rap artist produced a song, a second rap artist then remixed that song into another using the first as a hook. The original artist then took the song created by the second and used it as a hook for a third song. Creating a song of a song of a song is something that is only possible according to current societal morals as both artists didn’t care that the other took their work as it is commonplace among the music community. There is no reason that the same can’t be said for other communities.&lt;/p&gt;

&lt;p&gt;Information is power (Swartz , A. 2008, July). Many in history have said that before, and many will say it in the years to come. However, like all power in society there are those that want to make it so that they remain in power by keeping information, knowledge about everything within society to themselves. A perfect example of this is anyone who wants to read previous scientific and cultural research on a topic. This information is being increasingly held by a handful of private companies, that want to charge enormously large amounts of money to access that information. It is a sad fact that currently the final step in the research of many doctoral students is to turn in their paper, get it peer reviewed, accepted into the community, and then hand over the keys to the kingdom to those already in power. The knowledge gained is then held by the doctoral student, anyone who read it previously, and now anyone that want to pay online databases roughly a $100 per article for access.&lt;/p&gt;

&lt;p&gt;The online database companies take these matters very seriously, even pursuing legal actions against those who try to work around the safeguards that they have in place to stop the spread of knowledge. The most famous of these court cases involving JSTOR, notably the most well-known of the article stores, and a young man named Aaron Swartz. While on the campus of the Massachusetts Institute of Technology, Swartz had started downloading articles from JSTOR. While anyone on the campus has full access to JSTOR using their web portal, Aaron had written a script to simulate browsing the website to download multiple articles at once as fast as the computer could. All told, he got multiple hard drives worth of data for an unknown purpose. Swartz had said that he was using the papers he gathered for research purposes, something that is entirely within the rights of a JSTOR user. JSTOR, however, declared that he must be downloading the articles for the nefarious purpose of trying to open his own competing article database.&lt;/p&gt;

&lt;p&gt;Using the copyright laws that were stated within the first couple pages of this article and the Computer Fraud and Abuse Act of 1986, JSTOR brought legal action against Swartz, which involved him getting arrested by an FBI team. This eventually lead Swartz to be charged with multiple felonies and the chance of being ordered to pay restitution of over a million dollars. A million dollars, for what? Downloading some articles that anyone in the world that can make it to Boston can access for free? The prosecution ended abruptly when Aaron was found dead after the case was once again continued. While this may seem like an extreme example, this could become increasingly commonplace if the copyright laws aren’t adjusted to be realistic with the society of today that involves the use of so much online data.&lt;/p&gt;

&lt;p&gt;Without completely rehashing the arguments made above, it can be said that the main arguments for the changing of copyright laws are the differences between what is written law and what is believed by the common man, the effect that sharing works on knowledge can have, and how copyright serves to gate-keep that knowledge from those that need it the most. Through the surveys outlined above, it has been proven multiple times that the average person in America either sees no problem with internet piracy or is a pirate themselves. Since most seem okay to commit the act, it is highly doubtful that they believe that they should be prosecuted for breaking a law that is so out of touch with their actions and the actions of those around them. It is also clear to see that many works nowadays and in the past, are derivative in nature, whether that is painters and composers taking inspiration from their peers to the newer fascination that rappers and hip-hop artists have with remixing each other’s songs either adding a new rap verse or taking the chorus of one song to use as the refrain to another. Without the ability to do this, many of these artists would not be able to make the kinds of or amount of music that they currently do. Finally, in this day and age especially considering the number of times that this has gone wrong in the past it is frankly ridiculous that there should be keepers of knowledge. While there should always be libraries to store knowledge, the cost of obtaining that knowledge should be either physically getting to the library or navigating to the libraries webpage, not paying sometimes hundreds of dollars per article to access that information. Every time in history this same setup has occurred of those privileged few with access to all the knowledge leaving the plebeians with starvation of the mind, there has been some catastrophic event that causes the loss of all that knowledge.&lt;/p&gt;

&lt;p&gt;Judging the content contained within the body of this article, it should be relatively easy to assume where I stand on the issue, however I think it best to explicitly outline where I stand on the issue now that I have provided ample evidence in support. While an extreme view, even among my peers who spend most of their time within the digital realm, I believe that in the age of the internet copyright is a holdover of the past that is best to be forgotten about like the act of turning in papers written on scrolls or only passing knowledge orally. Personally, I am of the mind that the best works of humanity have yet to exist, will exist only through the continued use of technology, and will never exist if the current copyright system is allowed to continue unchanged.&lt;/p&gt;

&lt;p&gt;Following the discussions on this topic outlined above, it certainly seems necessary to rethink or totally abolish the use of copyright when it pertains to works that can and should so easily be shared within society today. The laws that were created and expanded upon before the internet was a commonality should not still be what governs the actions using its power. The world itself is a better place following the dissemination of knowledge and copyright laws only serve to go against the grain of time. Following this discussion, it looks like it might be time to update those laws America.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;u&gt;Works Cited&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;About Piracy. (n.d.). Retrieved January 18, 2018, from &lt;a href=&quot;https://www.riaa.com/resources-learning/about-piracy/&quot;&gt;https://www.riaa.com/resources-learning/about-piracy/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Article 1, Section 8, Clause 8. (2000). Retrieved January 18, 2018, from &lt;a href=&quot;http://press-    pubs.uchicago.edu/founders/tocs/a1_8_8.html&quot;&gt;http://press-    pubs.uchicago.edu/founders/tocs/a1_8_8.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;BITTON, M. (2012). RETHINKING THE ANTI-COUNTERFEITING TRADE AGREEMENT’S CRIMINAL COPYRIGHT ENFORCEMENT MEASURES. The Journal of Criminal Law and Criminology (1973-), 102(1), 67-117. Retrieved from &lt;a href=&quot;http://www.jstor.org/stable/23145786&quot;&gt;http://www.jstor.org/stable/23145786&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;COPYRIGHT TERM EXTENSION. (n.d.). Retrieved January 17, 2018, from     &lt;a href=&quot;https://www.copyright.gov/legislation/s505.pdf&quot;&gt;https://www.copyright.gov/legislation/s505.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Geiger, C. (2017). Copyright as an access right: Securing cultural participation through the    protection of creators’ interests. In GIBLIN R. &amp;amp; WEATHERALL K. (Eds.), What if we could reimagine copyright? (pp. 73-110). Acton: ANU Press. Retrieved from &lt;a href=&quot;http://www.jstor.org/stable/j.ctt1q1crjg.6&quot;&gt;http://www.jstor.org/stable/j.ctt1q1crjg.6&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Kunzru, H. (2015, July 03). Dune, 50 years on: how a science fiction novel changed the     world. Retrieved January 18, 2018, from     &lt;a href=&quot;https://www.theguardian.com/books/2015/jul/03/dune-50-years-on-science-fiction-novel-world&quot;&gt;https://www.theguardian.com/books/2015/jul/03/dune-50-years-on-science-fiction-novel-world&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Mick, J. (2013, January 21). Nearly Half of Americans Pirate Casually, But Pirates Purchase     More Legal Content. Retrieved January 18, 2018, from &lt;a href=&quot;http://www.dailytech.com/NearlyHalfofAmericansPirateCasuallyButPiratesPurchaseMoreLegalContent/article29702.htm&quot;&gt;http://www.dailytech.com/NearlyHalfofAmericansPirateCasuallyButPiratesPurchaseMoreLegalContent/article29702.htm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Mitchell, K. (2011, June 13). Where Do Morals Come From? Retrieved January 18, 2018, from &lt;a href=&quot;http://www.wiringthebrain.com/2011/06/where-do-morals-come-from.html&quot;&gt;http://www.wiringthebrain.com/2011/06/where-do-morals-come-from.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Reynolds, G. (2014). Ethics in Information Technology. Cengage Learning.&lt;/li&gt;
  &lt;li&gt;Swartz , A. (2008, July). Guerilla Open Access Manifesto. Retrieved January 18, 2018, from     &lt;a href=&quot;https://archive.org/stream/GuerillaOpenAccessManifesto/Goamjuly2008_djvu.txt&quot;&gt;https://archive.org/stream/GuerillaOpenAccessManifesto/Goamjuly2008_djvu.txt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Wu, T. (2003). When Code Isn’t Law. Virginia Law Review, 89(4), 679-751.doi:10.2307/3202374&lt;/li&gt;
  &lt;li&gt;17 U.S. Code § 107 - Limitations on exclusive rights: Fair use. (n.d.). Retrieved January 18,   2018, from &lt;a href=&quot;https://www.law.cornell.edu/uscode/text/17/107&quot;&gt;https://www.law.cornell.edu/uscode/text/17/107&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;17 U.S. Code § 506 - Criminal offenses. (n.d.). Retrieved January 18, 2018, from     &lt;a href=&quot;https://www.law.cornell.edu/uscode/text/17/506&quot;&gt;https://www.law.cornell.edu/uscode/text/17/506&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author></entry><entry><title type="html">Programming Pearls, Day Two</title><link href="htpps://www.doug-skinner.com/writing/2018/04/11/Programming-Pearls-Day-2.html" rel="alternate" type="text/html" title="Programming Pearls, Day Two" /><published>2018-04-11T12:00:00-04:00</published><updated>2018-04-11T12:00:00-04:00</updated><id>htpps://www.doug-skinner.com/writing/2018/04/11/Programming-Pearls-Day-2</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/04/11/Programming-Pearls-Day-2.html">&lt;p&gt;Contuinuing my journey, here’s the problem for the day: &lt;em&gt;How would you implement bit vectors using bitwise logical operations?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, here’s my solution to the problem, which works wonderfully:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bitwise_shift_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bitwise_shift_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bitwise_and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bitwise_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="Development" /><summary type="html">Contuinuing my journey, here’s the problem for the day: How would you implement bit vectors using bitwise logical operations?</summary></entry><entry><title type="html">Programming Pearls, Day One</title><link href="htpps://www.doug-skinner.com/writing/2018/04/10/Programming-Pearls-Day-1.html" rel="alternate" type="text/html" title="Programming Pearls, Day One" /><published>2018-04-10T12:00:00-04:00</published><updated>2018-04-10T12:00:00-04:00</updated><id>htpps://www.doug-skinner.com/writing/2018/04/10/Programming-Pearls-Day-1</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/04/10/Programming-Pearls-Day-1.html">&lt;p&gt;Today starts a journey, that if completed will take quite a long time. At the
end of it, I hope to be a better programmer through hours of thinking, reading,
and programming. The pathway of this journey is that of the book Programming
Pearls, with one small caveat. I will be doing all of the code in Python, to
help myself work towards becoming a better python programmer.&lt;/p&gt;

&lt;p&gt;Each day I will be doing one problem from the book. Some are easier than others,
but even the easiest will still take at least half an hour. So, to get on to it,
the text of the first problem is as follow:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If memory were not scarce, how would you implement a sort in a language with
libraries for representing and sorting sets?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For a bit of context, the original problem was that of sorting roughly a million
numbers in a space where memory was extremely limited, and execution time was
critical. The author eventually reached the conclusion that representing the
input numbers as a bitmap was the best way to do so, and these questions are
extensions of that problem.&lt;/p&gt;

&lt;p&gt;So, here’s my solution to the problem, which works wonderfully:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort_tel_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;numbers_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'numbers.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;in_nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# each line only contains one seven digit number, per the column&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;in_nums&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;output_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'out_numbers.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'start time {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sort_tel_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'end time {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="Development" /><summary type="html">Today starts a journey, that if completed will take quite a long time. At the end of it, I hope to be a better programmer through hours of thinking, reading, and programming. The pathway of this journey is that of the book Programming Pearls, with one small caveat. I will be doing all of the code in Python, to help myself work towards becoming a better python programmer.</summary></entry><entry><title type="html">Adding Custom Search To Your Site</title><link href="htpps://www.doug-skinner.com/writing/2018/04/05/Adding-Custom-Search.html" rel="alternate" type="text/html" title="Adding Custom Search To Your Site" /><published>2018-04-05T12:00:00-04:00</published><updated>2018-04-05T12:00:00-04:00</updated><id>htpps://www.doug-skinner.com/writing/2018/04/05/Adding-Custom-Search</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/04/05/Adding-Custom-Search.html">&lt;p&gt;So this week I decided to add a search form to my writings page, as I was getting pretty tired of scrolling through all of my posts to find certain things, and I thought that it would be interesting to share. To make the following work on your own site, it will be easiest if you are using the same technologies that I am Bootstrap, JQuery, and Jekyll. The instructions can be modified for other tech, but that’s something that you’ll have to figure out.&lt;/p&gt;

&lt;p&gt;To start, we need to first add a search form. The code that does this, ripped straight from my site, is the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-9&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search-box&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-control&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Search Term Here&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-outline-success&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Search&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that the button has a type of button, which means that it does not work to submit the form. In all honesty, the button is useless but makes the search bar look better in my opinion. Next we have the css to just add some padding to our search bar:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.search&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Very simple, but helps keep the search bar from touching either the edge of the browser on mobile or the top of the first post. The next bit is two parts inside your listing of all posts. The first is to add a class to each card, in my case &lt;code class=&quot;highlighter-rouge&quot;&gt;.text-to-search&lt;/code&gt;, and then having the following snippet somewhere in the card:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {.{ post.content }} // Without the dot, but otherwise Jekyll eats it from my post
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That puts all of the text inside the card so that we can grab it to search in our javascript. Speaking of which, here that is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#search-box&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'keyup'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text_to_search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'text-to-search'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text_to_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text_to_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text_to_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text_to_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Basically this grabs all the divs with our class name and the text in the search box, shows all the posts with our &lt;code class=&quot;highlighter-rouge&quot;&gt;.post&lt;/code&gt; tag. Then, looping through our list of posts it checks the contents of the post for the text in our search box, and hides the post if it is not found.&lt;/p&gt;

&lt;p&gt;And there you have it, a nice simple search to implement for a jekyll based site.&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">So this week I decided to add a search form to my writings page, as I was getting pretty tired of scrolling through all of my posts to find certain things, and I thought that it would be interesting to share. To make the following work on your own site, it will be easiest if you are using the same technologies that I am Bootstrap, JQuery, and Jekyll. The instructions can be modified for other tech, but that’s something that you’ll have to figure out.</summary></entry><entry><title type="html">How To Implement Token Based Auth In Flask</title><link href="htpps://www.doug-skinner.com/writing/2018/03/28/How-To-Implement-Token-Auth-In-Flask.html" rel="alternate" type="text/html" title="How To Implement Token Based Auth In Flask" /><published>2018-03-28T12:00:00-04:00</published><updated>2018-03-28T12:00:00-04:00</updated><id>htpps://www.doug-skinner.com/writing/2018/03/28/How-To-Implement-Token-Auth-In-Flask</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/03/28/How-To-Implement-Token-Auth-In-Flask.html">&lt;p&gt;So the other day I talked about &lt;a href=&quot;/writing/2018/03/12/Token-Based-Authentication.html&quot;&gt;why&lt;/a&gt; I chose to used token based authentication for my new service. I thought it would be useful for others to see how I did this, in case you want to as well.&lt;/p&gt;

&lt;p&gt;First, it’s necessary to define the database structure that I’ve implemented for the structure. Some things that are specific for my service have been omitted for brevity, but the tables below can be used as a starting point for any other service. Side note, the database that I use is MySQL, and that is what I recommend that most beginners use as it is stable and tested by much larger companies than yours will ever be. The tables are as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE DATABASE service;
USE DATABASE service;

CREATE TABLE IF NOT EXISTS logins (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) NOT NULL,
  `password` varchar(64) NOT NULL,
  PRIMARY KEY(`id`),
  UNIQUE KEY (`username`)
);

CREATE TABLE IF NOT EXISTS authentication_tokens (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `user_id` int(10) NOT NULL,
  `token` varchar(64) NOT NULL,
  `last_updated_at` TIMESTAMP DEFAULT NOW(),
  PRIMARY KEY(`id`),
  UNIQUE KEY (`user_id`)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, the above code can actually be copied into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.sql&lt;/code&gt; file, and moved into a MySQL installation by running &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql -p &amp;lt; filename.sql&lt;/code&gt; To briefly describe the database structure, the logins table acts as the main table for the database and the authorized_tokens table only is used to store the tokens as you’ll see shortly. Before we get to the tokens though, I’ll briefly describe how a user gets to added to the logins table.&lt;/p&gt;

&lt;p&gt;I won’t be covering any data validation as that would make the post about 100 times longer, but that can easily be added to this method. To avoid storing any plaintext passwords, the passwords are all salted and hashed before being stored, using &lt;a href=&quot;https://pypi.python.org/pypi/bcrypt/2.0.0&quot;&gt;bcypt&lt;/a&gt;. And the package that I use to connect to the MySQL database is MySQLdb. Here’s the user add method, and a simple database wrapper class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class DB(object):
    def __init__(self):
        self.database = MySQLdb.connect(host=&quot;localhost&quot;, user=&quot;root&quot;, passwd=db_password, db=&quot;service&quot;, cursorclass = MySQLdb.cursors.DictCursor)
        self.cursor = self.database.cursor()

    def close(self):
        self.database.close()

    def read(self, query):
        self.cursor.execute(query)
        data = self.cursor.fetchall()
        return data

    def write(self, query):
        try:
            self.cursor.execute(query)
            self.database.commit()
            return True
        except Exception as e:
            print e
            return False

class User(object):

    def __init__(self):
        self.db_wrapper = DB()
        
    def add(self, username, unhashed_pass, unhashed_pass_conf):
 	hashed = bcrypt.hashpw(str(unhashed_pass), bcrypt.gensalt())
 	query = &quot;INSERT INTO logins (username, password) VALUES ('{}', '{}')&quot;.format(username, hashed)
	rc = self.db_wrapper.write(query)
	return rc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have a simple way to add a user, we need to be able to create a token for them. First, to create the token we need to validate that the user has logged in correctly. To do so, we’re going to create a validator class. First, I’ll give the class in full, then walk through the couple of methods. It’s a little long, but it’ll be worth it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Authentication(object):

    def __init__(self):
        self.db_wrapper = DB()

    def close(self):
        self.db_wrapper.close()

    def generate_token(self, username):
        current_time = time.time()
        token = bcrypt.hashpw(str(username) + str(time.time()), bcrypt.gensalt())
        return token

    def is_authorized(self, username, token):
        user_id = self.get_user_id(username)
        stored_token = self.get_token(user_id)

        if stored_token is None:
            return False
        if stored_token != token:
            return False
        if stored_token == token:
            self.update_token(user_id)
            return True
        return False

    def login(self, username, password):
        user_id = self.get_user_id(username)
        if user_id is None:
            return False

        stored_pass = self.get_hashed_pass(user_id)
        if bcrypt.hashpw(str(password), stored_pass) == stored_pass:
            token = self.get_token(user_id)
            if token is None:
                token = self.generate_token(username)
                self.store_token(user_id, token)
            return True, {'token':token}
        else:
            return False, None

    def logout(self, username):
        user_id = self.get_user_id(username)
        if user_id is None:
            return False
        query = &quot;DELETE FROM authentication_tokens WHERE user_id = {}&quot;.format(user_id)
        rc = self.db_wrapper.write(query)
        return rc

    def get_hashed_pass(self, user_id):
        query = &quot;SELECT password FROM logins WHERE id = {}&quot;.format(user_id)
        results = self.db_wrapper.read(query)
        if results is None:
            return None
        return results[0]['password']

    def get_token(self, user_id):
        query = &quot;SELECT token FROM authentication_tokens WHERE user_id = {}&quot;.format(user_id)
        results = self.db_wrapper.read(query)
        if results is None:
            return None
        try:
            return results[0]['token']
        except:
            return None

    def get_user_id(self, username):
        query = &quot;SELECT id FROM logins WHERE username = '{}'&quot;.format(username)
        results = self.db_wrapper.read(query)
        if results is None:
            return None
        return results[0]['id']

    def store_token(self, user_id, token):
        query = &quot;INSERT INTO authentication_tokens (user_id, token) VALUES ({}, '{}')&quot;.format(user_id, token)
        rc = self.db_wrapper.write(query)
        return rc

    def update_token(self, user_id):
        query = &quot;UPDATE authentication_tokens SET last_updated_at = NOW() WHERE user_id = {}&quot;.format(user_id)
        rc = self.db_wrapper.write(query)
        return rc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, like I said it’s a lot, and there’s a bunch of helper methods that are used to modularize the code, but basically it consists of the is_authorized, login, and logout methods.&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">So the other day I talked about why I chose to used token based authentication for my new service. I thought it would be useful for others to see how I did this, in case you want to as well.</summary></entry><entry><title type="html">Tried And True Technologies</title><link href="htpps://www.doug-skinner.com/writing/2018/03/26/Tried-And-True-Tech.html" rel="alternate" type="text/html" title="Tried And True Technologies" /><published>2018-03-26T12:00:00-04:00</published><updated>2018-03-26T12:00:00-04:00</updated><id>htpps://www.doug-skinner.com/writing/2018/03/26/Tried-And-True-Tech</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/03/26/Tried-And-True-Tech.html">&lt;p&gt;Among the many things I’ve learned through watching and listening to others in the software development industry, one major thing is the concept of using tried and true technologies. You may be asking yourself what that means. It means specifically using technologies that plenty of other companies use. &lt;a href=&quot;https://marco.org&quot;&gt;Marco Arment&lt;/a&gt; has said it well many times that you never want to be the biggest user of a technology. The two major reasons for this are related.&lt;/p&gt;

&lt;p&gt;First, if you are the largest user of a technology you’re going to run into issues when trying to scale the software past a certain point. Along with that, if you’re the only company on that scale of use for a technology then it is most likely up to you to fix it. Instead of working on improving your product, suddenly you’re spending most of your time just ensuring that your newer technology stack doesn’t fall over.&lt;/p&gt;

&lt;p&gt;Now, that doesn’t mean that you have to only write programs for COBAL mainframes, but if you go to start a new project that will most likely get successful and none of the technologies that you plan on using have been around for over a year at minimum, well… Good luck. This post may come along as old fashioned, but I really do believe that you want the big issues to be someone else’s problem.&lt;/p&gt;

&lt;p&gt;Basically, most projects involve some type of frontend, some sort of backend with baked in business logic, and some sort of datastore. The frontend could be either a website, mobile app, or desktop software. Since I normally work with websites, I’ll focus on that. With websites, you normally want to use a a javascript framework that has been around for a while to avoid lots of issues that can crop up. You’ll also want to avoid using any newer CSS features to ensure cross-browser compatibility.&lt;/p&gt;

&lt;p&gt;Getting to the backend, you probably want to ensure that the language and web framework you’re using has been used before. Common bases are Flask and Django in Python, Ruby on Rails, and Laravel in PHP. Again, nothing exciting, however you don’t always want exciting. I don’t know about you, but I would much rather have a stable technology than a buggy or changing technology.&lt;/p&gt;

&lt;p&gt;Finally, on the datastore. In my opinion, if you are using anything other than MySQL you better have a reason that you can back up with facts not blog posts. MySQL has been around practically forever, and is mostly scalable. It has Master-Slave replication built in, which allows scaling up to a point rather easily. Honestly, I recommend starting with MySQL in such a setup. Once your company gets to the point where that is no longer viable, you can simply higher someone to solve the problem for you. So don’t make it a problem when there shouldn’t be one.&lt;/p&gt;</content><author><name></name></author><category term="Thoughts" /><summary type="html">Among the many things I’ve learned through watching and listening to others in the software development industry, one major thing is the concept of using tried and true technologies. You may be asking yourself what that means. It means specifically using technologies that plenty of other companies use. Marco Arment has said it well many times that you never want to be the biggest user of a technology. The two major reasons for this are related.</summary></entry><entry><title type="html">Token Based Authentication</title><link href="htpps://www.doug-skinner.com/writing/2018/03/12/Token-Based-Authentication.html" rel="alternate" type="text/html" title="Token Based Authentication" /><published>2018-03-12T12:00:00-04:00</published><updated>2018-03-12T12:00:00-04:00</updated><id>htpps://www.doug-skinner.com/writing/2018/03/12/Token-Based-Authentication</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/03/12/Token-Based-Authentication.html">&lt;p&gt;For the service that I’m writing, one of the main things that I’m focusing on is the user experience. I want the user to have a good time that’s frustration free throughout using the app. One of those concerns that I’ve thought about is the login experience, and more importantly how to have someone remain logged in while still being secure.&lt;/p&gt;

&lt;p&gt;The way that I went is to implement a token based authentication system. The user will log in and then their browser will be handed a token. With that token, the user has access to do all of their tasks within the application. Originally the token expiration date was a hard limit set at 24 hours after token creation. However I quickly noticed that this could be in issue.&lt;/p&gt;

&lt;p&gt;Say for instance that you normally log on to use my service after getting home from work for the day. And say this means that you normally log in around 6pm. So your token is then set to expire at 6pm tomorrow. Now say that you get home a little early the next day and log in at 5:50pm. Great, you think, because you’re already logged in. However, while doing your tasks you then notice that on your first action after 6pm you are suddenly logged out and asked to log back in even though you were just using the service. That seems quite annoying and frustrating right? Well, the simple way to solve this that I saw was to create a soft expiration of 24 hours after last action. What this means is that I make a simple additional database call every time the user completes and action to update the creation date of the key.&lt;/p&gt;

&lt;p&gt;While this does mean that the token could theoretically never expire, that risk is worth it to provide a better experience to the users. And if you run your own service, I think that you would agree.&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">For the service that I’m writing, one of the main things that I’m focusing on is the user experience. I want the user to have a good time that’s frustration free throughout using the app. One of those concerns that I’ve thought about is the login experience, and more importantly how to have someone remain logged in while still being secure.</summary></entry><entry><title type="html">Starting A Service</title><link href="htpps://www.doug-skinner.com/writing/2018/03/08/Starting-A-Service.html" rel="alternate" type="text/html" title="Starting A Service" /><published>2018-03-08T11:00:00-05:00</published><updated>2018-03-08T11:00:00-05:00</updated><id>htpps://www.doug-skinner.com/writing/2018/03/08/Starting-A-Service</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/03/08/Starting-A-Service.html">&lt;p&gt;Over the coming months I am going to be attempting to launch an online service. No hints as to what it is yet, but I thought it would be a good thought exercise to share with the internet any discoveries or problems that I encounter while going through this. Please keep an eye out for new posts in the future.&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">Over the coming months I am going to be attempting to launch an online service. No hints as to what it is yet, but I thought it would be a good thought exercise to share with the internet any discoveries or problems that I encounter while going through this. Please keep an eye out for new posts in the future.</summary></entry><entry><title type="html">Visual Guide to AES</title><link href="htpps://www.doug-skinner.com/writing/2018/02/26/Visual-Guide-AES.html" rel="alternate" type="text/html" title="Visual Guide to AES" /><published>2018-02-26T11:00:00-05:00</published><updated>2018-02-26T11:00:00-05:00</updated><id>htpps://www.doug-skinner.com/writing/2018/02/26/Visual-Guide-AES</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/02/26/Visual-Guide-AES.html">&lt;p&gt;While studying for my first intro to cryptography exam I was looking for
resources to better explain how AES encryptin works, and came along this cute
little drawing that does a remarkable job. Find it
&lt;a href=&quot;http://www.moserware.com/2009/09/stick-figure-guide-to-advanced.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">While studying for my first intro to cryptography exam I was looking for resources to better explain how AES encryptin works, and came along this cute little drawing that does a remarkable job. Find it here</summary></entry><entry><title type="html">Quick Tip - Remote Database Access in Apache</title><link href="htpps://www.doug-skinner.com/writing/2018/02/23/Quick-Tip-Remote-Servers-in-Apache.html" rel="alternate" type="text/html" title="Quick Tip - Remote Database Access in Apache" /><published>2018-02-23T11:00:00-05:00</published><updated>2018-02-23T11:00:00-05:00</updated><id>htpps://www.doug-skinner.com/writing/2018/02/23/Quick-Tip-Remote-Servers-in-Apache</id><content type="html" xml:base="htpps://www.doug-skinner.com/writing/2018/02/23/Quick-Tip-Remote-Servers-in-Apache.html">&lt;p&gt;While working on my current project I ran into an issue where I was trying to access a database on a remote server within the API that I’m building. While I could access the database from the mysql command line tool, I could not access it within my web application. Finally after lots of searching it appears that the issue was actually a security setting within selinux. To turn this bit of security off just type the below and you’ll be on your way.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setsebool httpd_can_network_connect_db on &amp;amp;&amp;amp; setsebool -P httpd_can_network_connect_db on&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><category term="Development" /><summary type="html">While working on my current project I ran into an issue where I was trying to access a database on a remote server within the API that I’m building. While I could access the database from the mysql command line tool, I could not access it within my web application. Finally after lots of searching it appears that the issue was actually a security setting within selinux. To turn this bit of security off just type the below and you’ll be on your way.</summary></entry></feed>